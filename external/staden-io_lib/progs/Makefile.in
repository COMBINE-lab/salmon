# Makefile.in generated by automake 1.14.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
bin_PROGRAMS = convert_trace$(EXEEXT) makeSCF$(EXEEXT) \
	extract_seq$(EXEEXT) extract_qual$(EXEEXT) \
	extract_fastq$(EXEEXT) index_tar$(EXEEXT) scf_dump$(EXEEXT) \
	scf_info$(EXEEXT) scf_update$(EXEEXT) get_comment$(EXEEXT) \
	hash_tar$(EXEEXT) hash_extract$(EXEEXT) hash_list$(EXEEXT) \
	trace_dump$(EXEEXT) hash_sff$(EXEEXT) append_sff$(EXEEXT) \
	ztr_dump$(EXEEXT) srf_dump_all$(EXEEXT) \
	srf_index_hash$(EXEEXT) srf_extract_linear$(EXEEXT) \
	srf_extract_hash$(EXEEXT) srf2fastq$(EXEEXT) \
	srf2fasta$(EXEEXT) srf_filter$(EXEEXT) srf_info$(EXEEXT) \
	srf_list$(EXEEXT) hash_exp$(EXEEXT) cram_dump$(EXEEXT) \
	cram_index$(EXEEXT) scramble$(EXEEXT) scram_merge$(EXEEXT) \
	scram_pileup$(EXEEXT) scram_flagstat$(EXEEXT) \
	scram_test$(EXEEXT) cram_size$(EXEEXT)
subdir = progs
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/depcomp
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/io_lib_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_append_sff_OBJECTS = append_sff.$(OBJEXT)
append_sff_OBJECTS = $(am_append_sff_OBJECTS)
append_sff_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
am_convert_trace_OBJECTS = convert_trace.$(OBJEXT)
convert_trace_OBJECTS = $(am_convert_trace_OBJECTS)
convert_trace_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_cram_dump_OBJECTS = cram_dump.$(OBJEXT)
cram_dump_OBJECTS = $(am_cram_dump_OBJECTS)
cram_dump_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_cram_index_OBJECTS = cram_index.$(OBJEXT)
cram_index_OBJECTS = $(am_cram_index_OBJECTS)
cram_index_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_cram_size_OBJECTS = cram_size.$(OBJEXT)
cram_size_OBJECTS = $(am_cram_size_OBJECTS)
cram_size_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_extract_fastq_OBJECTS = extract_fastq.$(OBJEXT)
extract_fastq_OBJECTS = $(am_extract_fastq_OBJECTS)
extract_fastq_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_extract_qual_OBJECTS = extract_qual.$(OBJEXT)
extract_qual_OBJECTS = $(am_extract_qual_OBJECTS)
extract_qual_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_extract_seq_OBJECTS = extract_seq.$(OBJEXT)
extract_seq_OBJECTS = $(am_extract_seq_OBJECTS)
extract_seq_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_get_comment_OBJECTS = get_comment.$(OBJEXT)
get_comment_OBJECTS = $(am_get_comment_OBJECTS)
get_comment_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_hash_exp_OBJECTS = hash_exp.$(OBJEXT)
hash_exp_OBJECTS = $(am_hash_exp_OBJECTS)
hash_exp_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_hash_extract_OBJECTS = hash_extract.$(OBJEXT)
hash_extract_OBJECTS = $(am_hash_extract_OBJECTS)
hash_extract_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_hash_list_OBJECTS = hash_list.$(OBJEXT)
hash_list_OBJECTS = $(am_hash_list_OBJECTS)
hash_list_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_hash_sff_OBJECTS = hash_sff.$(OBJEXT)
hash_sff_OBJECTS = $(am_hash_sff_OBJECTS)
hash_sff_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_hash_tar_OBJECTS = hash_tar.$(OBJEXT)
hash_tar_OBJECTS = $(am_hash_tar_OBJECTS)
hash_tar_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_index_tar_OBJECTS = index_tar.$(OBJEXT)
index_tar_OBJECTS = $(am_index_tar_OBJECTS)
index_tar_LDADD = $(LDADD)
am_makeSCF_OBJECTS = makeSCF.$(OBJEXT)
makeSCF_OBJECTS = $(am_makeSCF_OBJECTS)
makeSCF_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scf_dump_OBJECTS = scf_dump.$(OBJEXT)
scf_dump_OBJECTS = $(am_scf_dump_OBJECTS)
scf_dump_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scf_info_OBJECTS = scf_info.$(OBJEXT)
scf_info_OBJECTS = $(am_scf_info_OBJECTS)
scf_info_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scf_update_OBJECTS = scf_update.$(OBJEXT)
scf_update_OBJECTS = $(am_scf_update_OBJECTS)
scf_update_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scram_flagstat_OBJECTS = scram_flagstat.$(OBJEXT)
scram_flagstat_OBJECTS = $(am_scram_flagstat_OBJECTS)
scram_flagstat_DEPENDENCIES =  \
	$(top_builddir)/io_lib/libstaden-read.la
am_scram_merge_OBJECTS = scram_merge.$(OBJEXT)
scram_merge_OBJECTS = $(am_scram_merge_OBJECTS)
scram_merge_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scram_pileup_OBJECTS = scram_pileup.$(OBJEXT)
scram_pileup_OBJECTS = $(am_scram_pileup_OBJECTS)
scram_pileup_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scram_test_OBJECTS = scram_test.$(OBJEXT)
scram_test_OBJECTS = $(am_scram_test_OBJECTS)
scram_test_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_scramble_OBJECTS = scramble.$(OBJEXT)
scramble_OBJECTS = $(am_scramble_OBJECTS)
scramble_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf2fasta_OBJECTS = srf2fasta.$(OBJEXT)
srf2fasta_OBJECTS = $(am_srf2fasta_OBJECTS)
srf2fasta_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf2fastq_OBJECTS = srf2fastq.$(OBJEXT)
srf2fastq_OBJECTS = $(am_srf2fastq_OBJECTS)
srf2fastq_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf_dump_all_OBJECTS = srf_dump_all.$(OBJEXT)
srf_dump_all_OBJECTS = $(am_srf_dump_all_OBJECTS)
srf_dump_all_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf_extract_hash_OBJECTS = srf_extract_hash.$(OBJEXT)
srf_extract_hash_OBJECTS = $(am_srf_extract_hash_OBJECTS)
srf_extract_hash_DEPENDENCIES =  \
	$(top_builddir)/io_lib/libstaden-read.la
am_srf_extract_linear_OBJECTS = srf_extract_linear.$(OBJEXT)
srf_extract_linear_OBJECTS = $(am_srf_extract_linear_OBJECTS)
srf_extract_linear_DEPENDENCIES =  \
	$(top_builddir)/io_lib/libstaden-read.la
am_srf_filter_OBJECTS = srf_filter.$(OBJEXT)
srf_filter_OBJECTS = $(am_srf_filter_OBJECTS)
srf_filter_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf_index_hash_OBJECTS = srf_index_hash.$(OBJEXT)
srf_index_hash_OBJECTS = $(am_srf_index_hash_OBJECTS)
srf_index_hash_DEPENDENCIES =  \
	$(top_builddir)/io_lib/libstaden-read.la
am_srf_info_OBJECTS = srf_info.$(OBJEXT)
srf_info_OBJECTS = $(am_srf_info_OBJECTS)
srf_info_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_srf_list_OBJECTS = srf_list.$(OBJEXT)
srf_list_OBJECTS = $(am_srf_list_OBJECTS)
srf_list_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_trace_dump_OBJECTS = trace_dump.$(OBJEXT)
trace_dump_OBJECTS = $(am_trace_dump_OBJECTS)
trace_dump_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
am_ztr_dump_OBJECTS = ztr_dump.$(OBJEXT)
ztr_dump_OBJECTS = $(am_ztr_dump_OBJECTS)
ztr_dump_DEPENDENCIES = $(top_builddir)/io_lib/libstaden-read.la
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(append_sff_SOURCES) $(convert_trace_SOURCES) \
	$(cram_dump_SOURCES) $(cram_index_SOURCES) \
	$(cram_size_SOURCES) $(extract_fastq_SOURCES) \
	$(extract_qual_SOURCES) $(extract_seq_SOURCES) \
	$(get_comment_SOURCES) $(hash_exp_SOURCES) \
	$(hash_extract_SOURCES) $(hash_list_SOURCES) \
	$(hash_sff_SOURCES) $(hash_tar_SOURCES) $(index_tar_SOURCES) \
	$(makeSCF_SOURCES) $(scf_dump_SOURCES) $(scf_info_SOURCES) \
	$(scf_update_SOURCES) $(scram_flagstat_SOURCES) \
	$(scram_merge_SOURCES) $(scram_pileup_SOURCES) \
	$(scram_test_SOURCES) $(scramble_SOURCES) $(srf2fasta_SOURCES) \
	$(srf2fastq_SOURCES) $(srf_dump_all_SOURCES) \
	$(srf_extract_hash_SOURCES) $(srf_extract_linear_SOURCES) \
	$(srf_filter_SOURCES) $(srf_index_hash_SOURCES) \
	$(srf_info_SOURCES) $(srf_list_SOURCES) $(trace_dump_SOURCES) \
	$(ztr_dump_SOURCES)
DIST_SOURCES = $(append_sff_SOURCES) $(convert_trace_SOURCES) \
	$(cram_dump_SOURCES) $(cram_index_SOURCES) \
	$(cram_size_SOURCES) $(extract_fastq_SOURCES) \
	$(extract_qual_SOURCES) $(extract_seq_SOURCES) \
	$(get_comment_SOURCES) $(hash_exp_SOURCES) \
	$(hash_extract_SOURCES) $(hash_list_SOURCES) \
	$(hash_sff_SOURCES) $(hash_tar_SOURCES) $(index_tar_SOURCES) \
	$(makeSCF_SOURCES) $(scf_dump_SOURCES) $(scf_info_SOURCES) \
	$(scf_update_SOURCES) $(scram_flagstat_SOURCES) \
	$(scram_merge_SOURCES) $(scram_pileup_SOURCES) \
	$(scram_test_SOURCES) $(scramble_SOURCES) $(srf2fasta_SOURCES) \
	$(srf2fastq_SOURCES) $(srf_dump_all_SOURCES) \
	$(srf_extract_hash_SOURCES) $(srf_extract_linear_SOURCES) \
	$(srf_filter_SOURCES) $(srf_index_hash_SOURCES) \
	$(srf_info_SOURCES) $(srf_list_SOURCES) $(trace_dump_SOURCES) \
	$(ztr_dump_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBCURL = @LIBCURL@
LIBCURL_CPPFLAGS = @LIBCURL_CPPFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBZ = @LIBZ@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_CRAM_IO_CUSTOM_BUFFERING = @SET_CRAM_IO_CUSTOM_BUFFERING@
SET_ENDIAN = @SET_ENDIAN@
SET_MAKE = @SET_MAKE@
SET_STDIO_EXT = @SET_STDIO_EXT@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
VERS_AGE = @VERS_AGE@
VERS_CURRENT = @VERS_CURRENT@
VERS_REVISION = @VERS_REVISION@
_libcurl_config = @_libcurl_config@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
convert_trace_SOURCES = convert_trace.c
convert_trace_LDADD = $(top_builddir)/io_lib/libstaden-read.la
get_comment_SOURCES = get_comment.c
get_comment_LDADD = $(top_builddir)/io_lib/libstaden-read.la
makeSCF_SOURCES = makeSCF.c
makeSCF_LDADD = $(top_builddir)/io_lib/libstaden-read.la
extract_seq_SOURCES = extract_seq.c
extract_seq_LDADD = $(top_builddir)/io_lib/libstaden-read.la
extract_qual_SOURCES = extract_qual.c
extract_qual_LDADD = $(top_builddir)/io_lib/libstaden-read.la
extract_fastq_SOURCES = extract_fastq.c
extract_fastq_LDADD = $(top_builddir)/io_lib/libstaden-read.la
index_tar_SOURCES = index_tar.c
scf_dump_SOURCES = scf_dump.c
scf_dump_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scf_info_SOURCES = scf_info.c
scf_info_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scf_update_SOURCES = scf_update.c
scf_update_LDADD = $(top_builddir)/io_lib/libstaden-read.la
hash_exp_SOURCES = hash_exp.c
hash_exp_LDADD = $(top_builddir)/io_lib/libstaden-read.la
hash_tar_SOURCES = hash_tar.c
hash_tar_LDADD = $(top_builddir)/io_lib/libstaden-read.la
hash_list_SOURCES = hash_list.c
hash_list_LDADD = $(top_builddir)/io_lib/libstaden-read.la
hash_sff_SOURCES = hash_sff.c
hash_sff_LDADD = $(top_builddir)/io_lib/libstaden-read.la
append_sff_SOURCES = append_sff.c
append_sff_LDADD = $(top_builddir)/io_lib/libstaden-read.la
hash_extract_SOURCES = hash_extract.c
hash_extract_LDADD = $(top_builddir)/io_lib/libstaden-read.la
trace_dump_SOURCES = trace_dump.c
trace_dump_LDADD = $(top_builddir)/io_lib/libstaden-read.la
ztr_dump_SOURCES = ztr_dump.c
ztr_dump_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf2fastq_SOURCES = srf2fastq.c
srf2fastq_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf2fasta_SOURCES = srf2fasta.c
srf2fasta_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_dump_all_SOURCES = srf_dump_all.c
srf_dump_all_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_extract_linear_SOURCES = srf_extract_linear.c
srf_extract_linear_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_extract_hash_SOURCES = srf_extract_hash.c
srf_extract_hash_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_index_hash_SOURCES = srf_index_hash.c
srf_index_hash_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_filter_SOURCES = srf_filter.c
srf_filter_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_info_SOURCES = srf_info.c
srf_info_LDADD = $(top_builddir)/io_lib/libstaden-read.la
srf_list_SOURCES = srf_list.c
srf_list_LDADD = $(top_builddir)/io_lib/libstaden-read.la
cram_dump_SOURCES = cram_dump.c
cram_dump_LDADD = $(top_builddir)/io_lib/libstaden-read.la
cram_size_SOURCES = cram_size.c
cram_size_LDADD = $(top_builddir)/io_lib/libstaden-read.la
cram_index_SOURCES = cram_index.c
cram_index_LDADD = $(top_builddir)/io_lib/libstaden-read.la

#cram_to_sam_SOURCES = cram_to_sam.c
#cram_to_sam_LDADD = $(top_builddir)/io_lib/libstaden-read.la
#
#sam_to_cram_SOURCES = sam_to_cram.c
#sam_to_cram_LDADD = $(top_builddir)/io_lib/libstaden-read.la
#
#sam_convert_SOURCES = sam_convert.c
#sam_convert_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scramble_SOURCES = scramble.c
scramble_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scram_merge_SOURCES = scram_merge.c
scram_merge_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scram_pileup_SOURCES = scram_pileup.c scram_pileup.h
scram_pileup_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scram_flagstat_SOURCES = scram_flagstat.c
scram_flagstat_LDADD = $(top_builddir)/io_lib/libstaden-read.la
scram_test_SOURCES = scram_test.c
scram_test_LDADD = $(top_builddir)/io_lib/libstaden-read.la
INCLUDES = -I${top_srcdir}
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign progs/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign progs/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

append_sff$(EXEEXT): $(append_sff_OBJECTS) $(append_sff_DEPENDENCIES) $(EXTRA_append_sff_DEPENDENCIES) 
	@rm -f append_sff$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(append_sff_OBJECTS) $(append_sff_LDADD) $(LIBS)

convert_trace$(EXEEXT): $(convert_trace_OBJECTS) $(convert_trace_DEPENDENCIES) $(EXTRA_convert_trace_DEPENDENCIES) 
	@rm -f convert_trace$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(convert_trace_OBJECTS) $(convert_trace_LDADD) $(LIBS)

cram_dump$(EXEEXT): $(cram_dump_OBJECTS) $(cram_dump_DEPENDENCIES) $(EXTRA_cram_dump_DEPENDENCIES) 
	@rm -f cram_dump$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(cram_dump_OBJECTS) $(cram_dump_LDADD) $(LIBS)

cram_index$(EXEEXT): $(cram_index_OBJECTS) $(cram_index_DEPENDENCIES) $(EXTRA_cram_index_DEPENDENCIES) 
	@rm -f cram_index$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(cram_index_OBJECTS) $(cram_index_LDADD) $(LIBS)

cram_size$(EXEEXT): $(cram_size_OBJECTS) $(cram_size_DEPENDENCIES) $(EXTRA_cram_size_DEPENDENCIES) 
	@rm -f cram_size$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(cram_size_OBJECTS) $(cram_size_LDADD) $(LIBS)

extract_fastq$(EXEEXT): $(extract_fastq_OBJECTS) $(extract_fastq_DEPENDENCIES) $(EXTRA_extract_fastq_DEPENDENCIES) 
	@rm -f extract_fastq$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(extract_fastq_OBJECTS) $(extract_fastq_LDADD) $(LIBS)

extract_qual$(EXEEXT): $(extract_qual_OBJECTS) $(extract_qual_DEPENDENCIES) $(EXTRA_extract_qual_DEPENDENCIES) 
	@rm -f extract_qual$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(extract_qual_OBJECTS) $(extract_qual_LDADD) $(LIBS)

extract_seq$(EXEEXT): $(extract_seq_OBJECTS) $(extract_seq_DEPENDENCIES) $(EXTRA_extract_seq_DEPENDENCIES) 
	@rm -f extract_seq$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(extract_seq_OBJECTS) $(extract_seq_LDADD) $(LIBS)

get_comment$(EXEEXT): $(get_comment_OBJECTS) $(get_comment_DEPENDENCIES) $(EXTRA_get_comment_DEPENDENCIES) 
	@rm -f get_comment$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(get_comment_OBJECTS) $(get_comment_LDADD) $(LIBS)

hash_exp$(EXEEXT): $(hash_exp_OBJECTS) $(hash_exp_DEPENDENCIES) $(EXTRA_hash_exp_DEPENDENCIES) 
	@rm -f hash_exp$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_exp_OBJECTS) $(hash_exp_LDADD) $(LIBS)

hash_extract$(EXEEXT): $(hash_extract_OBJECTS) $(hash_extract_DEPENDENCIES) $(EXTRA_hash_extract_DEPENDENCIES) 
	@rm -f hash_extract$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_extract_OBJECTS) $(hash_extract_LDADD) $(LIBS)

hash_list$(EXEEXT): $(hash_list_OBJECTS) $(hash_list_DEPENDENCIES) $(EXTRA_hash_list_DEPENDENCIES) 
	@rm -f hash_list$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_list_OBJECTS) $(hash_list_LDADD) $(LIBS)

hash_sff$(EXEEXT): $(hash_sff_OBJECTS) $(hash_sff_DEPENDENCIES) $(EXTRA_hash_sff_DEPENDENCIES) 
	@rm -f hash_sff$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_sff_OBJECTS) $(hash_sff_LDADD) $(LIBS)

hash_tar$(EXEEXT): $(hash_tar_OBJECTS) $(hash_tar_DEPENDENCIES) $(EXTRA_hash_tar_DEPENDENCIES) 
	@rm -f hash_tar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_tar_OBJECTS) $(hash_tar_LDADD) $(LIBS)

index_tar$(EXEEXT): $(index_tar_OBJECTS) $(index_tar_DEPENDENCIES) $(EXTRA_index_tar_DEPENDENCIES) 
	@rm -f index_tar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(index_tar_OBJECTS) $(index_tar_LDADD) $(LIBS)

makeSCF$(EXEEXT): $(makeSCF_OBJECTS) $(makeSCF_DEPENDENCIES) $(EXTRA_makeSCF_DEPENDENCIES) 
	@rm -f makeSCF$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(makeSCF_OBJECTS) $(makeSCF_LDADD) $(LIBS)

scf_dump$(EXEEXT): $(scf_dump_OBJECTS) $(scf_dump_DEPENDENCIES) $(EXTRA_scf_dump_DEPENDENCIES) 
	@rm -f scf_dump$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scf_dump_OBJECTS) $(scf_dump_LDADD) $(LIBS)

scf_info$(EXEEXT): $(scf_info_OBJECTS) $(scf_info_DEPENDENCIES) $(EXTRA_scf_info_DEPENDENCIES) 
	@rm -f scf_info$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scf_info_OBJECTS) $(scf_info_LDADD) $(LIBS)

scf_update$(EXEEXT): $(scf_update_OBJECTS) $(scf_update_DEPENDENCIES) $(EXTRA_scf_update_DEPENDENCIES) 
	@rm -f scf_update$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scf_update_OBJECTS) $(scf_update_LDADD) $(LIBS)

scram_flagstat$(EXEEXT): $(scram_flagstat_OBJECTS) $(scram_flagstat_DEPENDENCIES) $(EXTRA_scram_flagstat_DEPENDENCIES) 
	@rm -f scram_flagstat$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scram_flagstat_OBJECTS) $(scram_flagstat_LDADD) $(LIBS)

scram_merge$(EXEEXT): $(scram_merge_OBJECTS) $(scram_merge_DEPENDENCIES) $(EXTRA_scram_merge_DEPENDENCIES) 
	@rm -f scram_merge$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scram_merge_OBJECTS) $(scram_merge_LDADD) $(LIBS)

scram_pileup$(EXEEXT): $(scram_pileup_OBJECTS) $(scram_pileup_DEPENDENCIES) $(EXTRA_scram_pileup_DEPENDENCIES) 
	@rm -f scram_pileup$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scram_pileup_OBJECTS) $(scram_pileup_LDADD) $(LIBS)

scram_test$(EXEEXT): $(scram_test_OBJECTS) $(scram_test_DEPENDENCIES) $(EXTRA_scram_test_DEPENDENCIES) 
	@rm -f scram_test$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scram_test_OBJECTS) $(scram_test_LDADD) $(LIBS)

scramble$(EXEEXT): $(scramble_OBJECTS) $(scramble_DEPENDENCIES) $(EXTRA_scramble_DEPENDENCIES) 
	@rm -f scramble$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scramble_OBJECTS) $(scramble_LDADD) $(LIBS)

srf2fasta$(EXEEXT): $(srf2fasta_OBJECTS) $(srf2fasta_DEPENDENCIES) $(EXTRA_srf2fasta_DEPENDENCIES) 
	@rm -f srf2fasta$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf2fasta_OBJECTS) $(srf2fasta_LDADD) $(LIBS)

srf2fastq$(EXEEXT): $(srf2fastq_OBJECTS) $(srf2fastq_DEPENDENCIES) $(EXTRA_srf2fastq_DEPENDENCIES) 
	@rm -f srf2fastq$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf2fastq_OBJECTS) $(srf2fastq_LDADD) $(LIBS)

srf_dump_all$(EXEEXT): $(srf_dump_all_OBJECTS) $(srf_dump_all_DEPENDENCIES) $(EXTRA_srf_dump_all_DEPENDENCIES) 
	@rm -f srf_dump_all$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_dump_all_OBJECTS) $(srf_dump_all_LDADD) $(LIBS)

srf_extract_hash$(EXEEXT): $(srf_extract_hash_OBJECTS) $(srf_extract_hash_DEPENDENCIES) $(EXTRA_srf_extract_hash_DEPENDENCIES) 
	@rm -f srf_extract_hash$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_extract_hash_OBJECTS) $(srf_extract_hash_LDADD) $(LIBS)

srf_extract_linear$(EXEEXT): $(srf_extract_linear_OBJECTS) $(srf_extract_linear_DEPENDENCIES) $(EXTRA_srf_extract_linear_DEPENDENCIES) 
	@rm -f srf_extract_linear$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_extract_linear_OBJECTS) $(srf_extract_linear_LDADD) $(LIBS)

srf_filter$(EXEEXT): $(srf_filter_OBJECTS) $(srf_filter_DEPENDENCIES) $(EXTRA_srf_filter_DEPENDENCIES) 
	@rm -f srf_filter$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_filter_OBJECTS) $(srf_filter_LDADD) $(LIBS)

srf_index_hash$(EXEEXT): $(srf_index_hash_OBJECTS) $(srf_index_hash_DEPENDENCIES) $(EXTRA_srf_index_hash_DEPENDENCIES) 
	@rm -f srf_index_hash$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_index_hash_OBJECTS) $(srf_index_hash_LDADD) $(LIBS)

srf_info$(EXEEXT): $(srf_info_OBJECTS) $(srf_info_DEPENDENCIES) $(EXTRA_srf_info_DEPENDENCIES) 
	@rm -f srf_info$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_info_OBJECTS) $(srf_info_LDADD) $(LIBS)

srf_list$(EXEEXT): $(srf_list_OBJECTS) $(srf_list_DEPENDENCIES) $(EXTRA_srf_list_DEPENDENCIES) 
	@rm -f srf_list$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(srf_list_OBJECTS) $(srf_list_LDADD) $(LIBS)

trace_dump$(EXEEXT): $(trace_dump_OBJECTS) $(trace_dump_DEPENDENCIES) $(EXTRA_trace_dump_DEPENDENCIES) 
	@rm -f trace_dump$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(trace_dump_OBJECTS) $(trace_dump_LDADD) $(LIBS)

ztr_dump$(EXEEXT): $(ztr_dump_OBJECTS) $(ztr_dump_DEPENDENCIES) $(EXTRA_ztr_dump_DEPENDENCIES) 
	@rm -f ztr_dump$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ztr_dump_OBJECTS) $(ztr_dump_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/append_sff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/convert_trace.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cram_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cram_index.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cram_size.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract_fastq.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract_qual.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract_seq.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/get_comment.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_exp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_extract.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_list.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_sff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash_tar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/index_tar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/makeSCF.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scf_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scf_info.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scf_update.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scram_flagstat.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scram_merge.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scram_pileup.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scram_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scramble.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf2fasta.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf2fastq.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_dump_all.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_extract_hash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_extract_linear.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_filter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_index_hash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_info.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/srf_list.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trace_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ztr_dump.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
